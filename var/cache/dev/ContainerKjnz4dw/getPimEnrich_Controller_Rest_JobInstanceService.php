<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'pim_enrich.controller.rest.job_instance' shared service.

$a = ${($_ = isset($this->services['pim_catalog.filter.chained']) ? $this->services['pim_catalog.filter.chained'] : $this->load(__DIR__.'/getPimCatalog_Filter_ChainedService.php')) && false ?: '_'};

return $this->services['pim_enrich.controller.rest.job_instance'] = new \Akeneo\Platform\Bundle\ImportExportBundle\Controller\InternalApi\JobInstanceController(${($_ = isset($this->services['akeneo_batch.job.job_instance_repository']) ? $this->services['akeneo_batch.job.job_instance_repository'] : $this->getAkeneoBatch_Job_JobInstanceRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.job.job_registry']) ? $this->services['akeneo_batch.job.job_registry'] : $this->load(__DIR__.'/getAkeneoBatch_Job_JobRegistryService.php')) && false ?: '_'}, ${($_ = isset($this->services['pim_catalog.normalizer.standard.job_instance']) ? $this->services['pim_catalog.normalizer.standard.job_instance'] : $this->services['pim_catalog.normalizer.standard.job_instance'] = new \Akeneo\Tool\Component\Batch\Normalizer\Standard\JobInstanceNormalizer()) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.updater.job_instance']) ? $this->services['akeneo_batch.updater.job_instance'] : $this->load(__DIR__.'/getAkeneoBatch_Updater_JobInstanceService.php')) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.saver.job_instance']) ? $this->services['akeneo_batch.saver.job_instance'] : $this->load(__DIR__.'/getAkeneoBatch_Saver_JobInstanceService.php')) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.remover.job_instance']) ? $this->services['akeneo_batch.remover.job_instance'] : $this->load(__DIR__.'/getAkeneoBatch_Remover_JobInstanceService.php')) && false ?: '_'}, ${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->getValidatorService()) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.job.job_parameters_validator']) ? $this->services['akeneo_batch.job.job_parameters_validator'] : $this->load(__DIR__.'/getAkeneoBatch_Job_JobParametersValidatorService.php')) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.job_parameters_factory']) ? $this->services['akeneo_batch.job_parameters_factory'] : $this->load(__DIR__.'/getAkeneoBatch_JobParametersFactoryService.php')) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch_queue.launcher.queue_job_launcher']) ? $this->services['akeneo_batch_queue.launcher.queue_job_launcher'] : $this->load(__DIR__.'/getAkeneoBatchQueue_Launcher_QueueJobLauncherService.php')) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->getRouterService()) && false ?: '_'}, ${($_ = isset($this->services['pim_enrich.provider.form.chained']) ? $this->services['pim_enrich.provider.form.chained'] : $this->load(__DIR__.'/getPimEnrich_Provider_Form_ChainedService.php')) && false ?: '_'}, $a, ${($_ = isset($this->services['pim_enrich.normalizer.violation']) ? $this->services['pim_enrich.normalizer.violation'] : $this->services['pim_enrich.normalizer.violation'] = new \Akeneo\Pim\Enrichment\Component\Product\Normalizer\InternalApi\ViolationNormalizer()) && false ?: '_'}, ${($_ = isset($this->services['akeneo_batch.job_instance_factory']) ? $this->services['akeneo_batch.job_instance_factory'] : $this->services['akeneo_batch.job_instance_factory'] = new \Akeneo\Tool\Bundle\BatchBundle\Job\JobInstanceFactory('Akeneo\\Tool\\Component\\Batch\\Model\\JobInstance')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->getDebug_EventDispatcherService()) && false ?: '_'}, $a, '/tmp/pim/upload_tmp_dir');
