<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'doctrine.dbal.session_connection' shared service.

$a = new \Doctrine\DBAL\Logging\LoggerChain();
$a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger']) ? $this->services['doctrine.dbal.logger'] : $this->getDoctrine_Dbal_LoggerService()) && false ?: '_'});
$a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.session']) ? $this->services['doctrine.dbal.logger.profiling.session'] : $this->services['doctrine.dbal.logger.profiling.session'] = new \Doctrine\DBAL\Logging\DebugStack()) && false ?: '_'});

$b = new \Doctrine\DBAL\Configuration();
$b->setSQLLogger($a);

$c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
$c->addEventSubscriber(${($_ = isset($this->services['pim_datagrid.event_subscriber.filter_entity_with_values_subscriber']) ? $this->services['pim_datagrid.event_subscriber.filter_entity_with_values_subscriber'] : $this->services['pim_datagrid.event_subscriber.filter_entity_with_values_subscriber'] = new \Oro\Bundle\PimDataGridBundle\EventSubscriber\FilterEntityWithValuesSubscriber()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_catalog.event_subscriber.load_product_values']) ? $this->services['pim_catalog.event_subscriber.load_product_values'] : $this->services['pim_catalog.event_subscriber.load_product_values'] = new \Akeneo\Pim\Enrichment\Bundle\EventSubscriber\LoadEntityWithValuesSubscriber($this)) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_enrich.event_listener.add_locale']) ? $this->services['pim_enrich.event_listener.add_locale'] : $this->services['pim_enrich.event_listener.add_locale'] = new \Akeneo\Platform\Bundle\UIBundle\EventListener\AddLocaleListener()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_catalog.event_subscriber.timestampable']) ? $this->services['pim_catalog.event_subscriber.timestampable'] : $this->services['pim_catalog.event_subscriber.timestampable'] = new \Akeneo\Pim\Enrichment\Bundle\EventSubscriber\TimestampableSubscriber()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_catalog.event_subscriber.scopable']) ? $this->services['pim_catalog.event_subscriber.scopable'] : $this->getPimCatalog_EventSubscriber_ScopableService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_catalog.event_subscriber.localizable']) ? $this->services['pim_catalog.event_subscriber.localizable'] : $this->getPimCatalog_EventSubscriber_LocalizableService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_catalog.event_subscriber.create_attribute_requirement']) ? $this->services['pim_catalog.event_subscriber.create_attribute_requirement'] : $this->getPimCatalog_EventSubscriber_CreateAttributeRequirementService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_user.entity_with_image.subscriber']) ? $this->services['pim_user.entity_with_image.subscriber'] : $this->services['pim_user.entity_with_image.subscriber'] = new \Akeneo\UserManagement\Bundle\EventListener\UploadedImageSubscriber(($this->targetDirs[3].'/app'))) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_user.event_subscriber.user_preferences']) ? $this->services['pim_user.event_subscriber.user_preferences'] : $this->getPimUser_EventSubscriber_UserPreferencesService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['akeneo_storage_utils.event_subscriber.configure_orm_mappings']) ? $this->services['akeneo_storage_utils.event_subscriber.configure_orm_mappings'] : $this->getAkeneoStorageUtils_EventSubscriber_ConfigureOrmMappingsService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['akeneo_storage_utils.event_subscriber.resolve_target_repository']) ? $this->services['akeneo_storage_utils.event_subscriber.resolve_target_repository'] : $this->getAkeneoStorageUtils_EventSubscriber_ResolveTargetRepositoryService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_versioning.event_subscriber.timestampable']) ? $this->services['pim_versioning.event_subscriber.timestampable'] : $this->getPimVersioning_EventSubscriber_TimestampableService()) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['pim_versioning.event_subscriber.addversion']) ? $this->services['pim_versioning.event_subscriber.addversion'] : $this->services['pim_versioning.event_subscriber.addversion'] = new \Akeneo\Tool\Bundle\VersioningBundle\EventSubscriber\AddVersionSubscriber($this)) && false ?: '_'});
$c->addEventSubscriber(${($_ = isset($this->services['doctrine.orm.listeners.resolve_target_entity']) ? $this->services['doctrine.orm.listeners.resolve_target_entity'] : $this->getDoctrine_Orm_Listeners_ResolveTargetEntityService()) && false ?: '_'});
$c->addEventListener(array(0 => 'preUpdate'), ${($_ = isset($this->services['pim_user.role.listener']) ? $this->services['pim_user.role.listener'] : $this->getPimUser_Role_ListenerService()) && false ?: '_'});
$c->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener()) && false ?: '_'});

return $this->services['doctrine.dbal.session_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->getDoctrine_Dbal_ConnectionFactoryService()) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => 'mysql', 'port' => NULL, 'unix_socket' => NULL, 'dbname' => 'akeneo_pim', 'user' => 'akeneo_pim', 'password' => 'akeneo_pim', 'charset' => 'utf8mb4', 'driverOptions' => array(), 'defaultTableOptions' => array('charset' => 'utf8mb4', 'collate' => 'utf8mb4_unicode_ci', 'row_format' => 'DYNAMIC')), $b, $c, array());
