<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'security.acl.voter.basic_permissions' shared service.

$a = ${($_ = isset($this->services['oro_security.acl.object_identity_factory']) ? $this->services['oro_security.acl.object_identity_factory'] : $this->getOroSecurity_Acl_ObjectIdentityFactoryService()) && false ?: '_'};
$b = ${($_ = isset($this->services['oro_security.acl.extension_selector']) ? $this->services['oro_security.acl.extension_selector'] : $this->getOroSecurity_Acl_ExtensionSelectorService()) && false ?: '_'};

$c = new \Oro\Bundle\SecurityBundle\Acl\Domain\RootBasedAclProvider($a);
$c->setBaseAclProvider(${($_ = isset($this->services['security.acl.provider']) ? $this->services['security.acl.provider'] : $this->load(__DIR__.'/getSecurity_Acl_ProviderService.php')) && false ?: '_'});

$this->services['security.acl.voter.basic_permissions'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter($c, new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityRetrievalStrategy($a), new \Symfony\Component\Security\Acl\Domain\SecurityIdentityRetrievalStrategy(${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array())) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken')) && false ?: '_'}), new \Oro\Bundle\SecurityBundle\Acl\Permission\PermissionMap($b), ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->getMonolog_Logger_SecurityService()) && false ?: '_'}, true);

$instance->setAclExtensionSelector($b);

return $instance;
