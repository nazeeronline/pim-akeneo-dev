<?php

namespace Proxies\__CG__\Akeneo\Channel\Component\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Channel extends \Akeneo\Channel\Component\Model\Channel implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'code', 'category', 'currencies', 'locales', 'locale', 'translations', 'conversionUnits'];
        }

        return ['__isInitialized__', 'id', 'code', 'category', 'currencies', 'locales', 'locale', 'translations', 'conversionUnits'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Channel $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslation($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslation', [$locale]);

        return parent::getTranslation($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation(\Akeneo\Tool\Component\Localization\Model\TranslationInterface $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$translation]);

        return parent::addTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation(\Akeneo\Tool\Component\Localization\Model\TranslationInterface $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$translation]);

        return parent::removeTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationFQCN()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationFQCN', []);

        return parent::getTranslationFQCN();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Akeneo\Pim\Enrichment\Component\Category\Model\CategoryInterface $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrencies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrencies', []);

        return parent::getCurrencies();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrencies(array $currencies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrencies', [$currencies]);

        return parent::setCurrencies($currencies);
    }

    /**
     * {@inheritDoc}
     */
    public function addCurrency(\Akeneo\Channel\Component\Model\CurrencyInterface $currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCurrency', [$currency]);

        return parent::addCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCurrency(\Akeneo\Channel\Component\Model\CurrencyInterface $currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCurrency', [$currency]);

        return parent::removeCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocales()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocales', []);

        return parent::getLocales();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocaleCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocaleCodes', []);

        return parent::getLocaleCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocales(array $locales)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocales', [$locales]);

        return parent::setLocales($locales);
    }

    /**
     * {@inheritDoc}
     */
    public function addLocale(\Akeneo\Channel\Component\Model\LocaleInterface $locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLocale', [$locale]);

        return parent::addLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLocale(\Akeneo\Channel\Component\Model\LocaleInterface $locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLocale', [$locale]);

        return parent::removeLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocale(\Akeneo\Channel\Component\Model\LocaleInterface $locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocale', [$locale]);

        return parent::hasLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCurrency(\Akeneo\Channel\Component\Model\CurrencyInterface $currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCurrency', [$currency]);

        return parent::hasCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function setConversionUnits(array $conversionUnits)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConversionUnits', [$conversionUnits]);

        return parent::setConversionUnits($conversionUnits);
    }

    /**
     * {@inheritDoc}
     */
    public function getConversionUnits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConversionUnits', []);

        return parent::getConversionUnits();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', []);

        return parent::getReference();
    }

}
