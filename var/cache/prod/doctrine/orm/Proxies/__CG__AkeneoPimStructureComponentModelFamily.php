<?php

namespace Proxies\__CG__\Akeneo\Pim\Structure\Component\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Family extends \Akeneo\Pim\Structure\Component\Model\Family implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'code', 'attributes', 'locale', 'translations', 'attributeAsLabel', 'attributeAsImage', 'requirements', 'created', 'updated', 'familyVariants'];
        }

        return ['__isInitialized__', 'id', 'code', 'attributes', 'locale', 'translations', 'attributeAsLabel', 'attributeAsImage', 'requirements', 'created', 'updated', 'familyVariants'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Family $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function addAttribute(\Akeneo\Pim\Structure\Component\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttribute', [$attribute]);

        return parent::addAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttribute(\Akeneo\Pim\Structure\Component\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttribute', [$attribute]);

        return parent::removeAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeCodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeCodes', []);

        return parent::getAttributeCodes();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupedAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupedAttributes', []);

        return parent::getGroupedAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttribute(\Akeneo\Pim\Structure\Component\Model\AttributeInterface $attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttribute', [$attribute]);

        return parent::hasAttribute($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttributeCode($attributeCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttributeCode', [$attributeCode]);

        return parent::hasAttributeCode($attributeCode);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeAsLabel(\Akeneo\Pim\Structure\Component\Model\AttributeInterface $attributeAsLabel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeAsLabel', [$attributeAsLabel]);

        return parent::setAttributeAsLabel($attributeAsLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeAsLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeAsLabel', []);

        return parent::getAttributeAsLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeAsImage(?\Akeneo\Pim\Structure\Component\Model\AttributeInterface $attributeAsImage): \Akeneo\Pim\Structure\Component\Model\FamilyInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeAsImage', [$attributeAsImage]);

        return parent::setAttributeAsImage($attributeAsImage);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeAsImage(): ?\Akeneo\Pim\Structure\Component\Model\AttributeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeAsImage', []);

        return parent::getAttributeAsImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeAsLabelChoices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeAsLabelChoices', []);

        return parent::getAttributeAsLabelChoices();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslation($locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslation', [$locale]);

        return parent::getTranslation($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation(\Akeneo\Tool\Component\Localization\Model\TranslationInterface $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$translation]);

        return parent::addTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation(\Akeneo\Tool\Component\Localization\Model\TranslationInterface $translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$translation]);

        return parent::removeTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationFQCN()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationFQCN', []);

        return parent::getTranslationFQCN();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function addAttributeRequirement(\Akeneo\Pim\Structure\Component\Model\AttributeRequirementInterface $requirement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttributeRequirement', [$requirement]);

        return parent::addAttributeRequirement($requirement);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttributeRequirement(\Akeneo\Pim\Structure\Component\Model\AttributeRequirementInterface $requirement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttributeRequirement', [$requirement]);

        return parent::removeAttributeRequirement($requirement);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeRequirements(array $requirements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeRequirements', [$requirements]);

        return parent::setAttributeRequirements($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeRequirements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeRequirements', []);

        return parent::getAttributeRequirements();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeRequirementKey(\Akeneo\Pim\Structure\Component\Model\AttributeRequirementInterface $requirement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeRequirementKey', [$requirement]);

        return parent::getAttributeRequirementKey($requirement);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', []);

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function getFamilyVariants(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFamilyVariants', []);

        return parent::getFamilyVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function setFamilyVariants(\Doctrine\Common\Collections\Collection $familyVariants): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFamilyVariants', [$familyVariants]);

        parent::setFamilyVariants($familyVariants);
    }

}
