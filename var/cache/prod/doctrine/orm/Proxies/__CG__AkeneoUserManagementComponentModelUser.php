<?php

namespace Proxies\__CG__\Akeneo\UserManagement\Component\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Akeneo\UserManagement\Component\Model\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'username', 'email', 'namePrefix', 'firstName', 'middleName', 'lastName', 'nameSuffix', 'image', 'avatar', 'imageFile', 'enabled', 'salt', 'password', 'plainPassword', 'confirmationToken', 'passwordRequestedAt', 'lastLogin', 'loginCount', 'roles', 'groups', 'api', 'createdAt', 'updatedAt', 'catalogLocale', 'uiLocale', 'catalogScope', 'defaultTree', 'defaultGridViews', 'emailNotifications', 'productGridFilters', 'phone', 'timezone', '' . "\0" . 'Akeneo\\UserManagement\\Component\\Model\\User' . "\0" . 'properties'];
        }

        return ['__isInitialized__', 'id', 'username', 'email', 'namePrefix', 'firstName', 'middleName', 'lastName', 'nameSuffix', 'image', 'avatar', 'imageFile', 'enabled', 'salt', 'password', 'plainPassword', 'confirmationToken', 'passwordRequestedAt', 'lastLogin', 'loginCount', 'roles', 'groups', 'api', 'createdAt', 'updatedAt', 'catalogLocale', 'uiLocale', 'catalogScope', 'defaultTree', 'defaultGridViews', 'emailNotifications', 'productGridFilters', 'phone', 'timezone', '' . "\0" . 'Akeneo\\UserManagement\\Component\\Model\\User' . "\0" . 'properties'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', []);

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($serialized)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', [$serialized]);

        return parent::unserialize($serialized);
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function getClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClass', []);

        return parent::getClass();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', []);

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function getMiddleName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMiddleName', []);

        return parent::getMiddleName();
    }

    /**
     * {@inheritDoc}
     */
    public function getNamePrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNamePrefix', []);

        return parent::getNamePrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameSuffix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameSuffix', []);

        return parent::getNameSuffix();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullName', []);

        return parent::getFullName();
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageFile', []);

        return parent::getImageFile();
    }

    /**
     * {@inheritDoc}
     */
    public function getAvatar(): ?\Akeneo\Tool\Component\FileStorage\Model\FileInfoInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvatar', []);

        return parent::getAvatar();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvatar(\Akeneo\Tool\Component\FileStorage\Model\FileInfoInterface $avatar = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvatar', [$avatar]);

        parent::setAvatar($avatar);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlainPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlainPassword', []);

        return parent::getPlainPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfirmationToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfirmationToken', []);

        return parent::getConfirmationToken();
    }

    /**
     * {@inheritDoc}
     */
    public function getPasswordRequestedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPasswordRequestedAt', []);

        return parent::getPasswordRequestedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLogin', []);

        return parent::getLastLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function getLoginCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLoginCount', []);

        return parent::getLoginCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', []);

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function isAccountNonExpired()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccountNonExpired', []);

        return parent::isAccountNonExpired();
    }

    /**
     * {@inheritDoc}
     */
    public function isAccountNonLocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccountNonLocked', []);

        return parent::isAccountNonLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function isPasswordRequestNonExpired($ttl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPasswordRequestNonExpired', [$ttl]);

        return parent::isPasswordRequestNonExpired($ttl);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName($firstName = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', [$firstName]);

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName($lastName = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', [$lastName]);

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function setMiddleName($middleName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMiddleName', [$middleName]);

        return parent::setMiddleName($middleName);
    }

    /**
     * {@inheritDoc}
     */
    public function setNamePrefix($namePrefix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNamePrefix', [$namePrefix]);

        return parent::setNamePrefix($namePrefix);
    }

    /**
     * {@inheritDoc}
     */
    public function setNameSuffix($nameSuffix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameSuffix', [$nameSuffix]);

        return parent::setNameSuffix($nameSuffix);
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function setImageFile(\Symfony\Component\HttpFoundation\File\UploadedFile $imageFile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageFile', [$imageFile]);

        return parent::setImageFile($imageFile);
    }

    /**
     * {@inheritDoc}
     */
    public function unsetImageFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetImageFile', []);

        return parent::unsetImageFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setPlainPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlainPassword', [$password]);

        return parent::setPlainPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setConfirmationToken($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfirmationToken', [$token]);

        return parent::setConfirmationToken($token);
    }

    /**
     * {@inheritDoc}
     */
    public function setPasswordRequestedAt(\DateTime $time = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPasswordRequestedAt', [$time]);

        return parent::setPasswordRequestedAt($time);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLogin(\DateTime $time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLogin', [$time]);

        return parent::setLastLogin($time);
    }

    /**
     * {@inheritDoc}
     */
    public function setLoginCount($count)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLoginCount', [$count]);

        return parent::setLoginCount($count);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getRolesCollection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRolesCollection', []);

        return parent::getRolesCollection();
    }

    /**
     * {@inheritDoc}
     */
    public function getRole($roleName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', [$roleName]);

        return parent::getRole($roleName);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$role]);

        return parent::hasRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\Akeneo\UserManagement\Component\Model\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles($roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function setRolesCollection(\Doctrine\Common\Collections\Collection $collection)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRolesCollection', [$collection]);

        return parent::setRolesCollection($collection);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', []);

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupNames', []);

        return parent::getGroupNames();
    }

    /**
     * {@inheritDoc}
     */
    public function hasGroup($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasGroup', [$name]);

        return parent::hasGroup($name);
    }

    /**
     * {@inheritDoc}
     */
    public function addGroup(\Akeneo\UserManagement\Component\Model\GroupInterface $group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGroup', [$group]);

        return parent::addGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGroup(\Akeneo\UserManagement\Component\Model\GroupInterface $group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGroup', [$group]);

        return parent::removeGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function setGroups(array $groups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroups', [$groups]);

        return parent::setGroups($groups);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupsIds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupsIds', []);

        return parent::getGroupsIds();
    }

    /**
     * {@inheritDoc}
     */
    public function getImagePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImagePath', []);

        return parent::getImagePath();
    }

    /**
     * {@inheritDoc}
     */
    public function generateToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generateToken', []);

        return parent::generateToken();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function beforeSave()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'beforeSave', []);

        return parent::beforeSave();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function isCredentialsNonExpired()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCredentialsNonExpired', []);

        return parent::isCredentialsNonExpired();
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDir($forWeb = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDir', [$forWeb]);

        return parent::getUploadDir($forWeb);
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalogLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalogLocale', []);

        return parent::getCatalogLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setCatalogLocale(\Akeneo\Channel\Component\Model\LocaleInterface $catalogLocale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCatalogLocale', [$catalogLocale]);

        return parent::setCatalogLocale($catalogLocale);
    }

    /**
     * {@inheritDoc}
     */
    public function getUiLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUiLocale', []);

        return parent::getUiLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setUiLocale(\Akeneo\Channel\Component\Model\LocaleInterface $uiLocale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUiLocale', [$uiLocale]);

        return parent::setUiLocale($uiLocale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCatalogScope()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCatalogScope', []);

        return parent::getCatalogScope();
    }

    /**
     * {@inheritDoc}
     */
    public function setCatalogScope(\Akeneo\Channel\Component\Model\ChannelInterface $catalogScope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCatalogScope', [$catalogScope]);

        return parent::setCatalogScope($catalogScope);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultTree()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultTree', []);

        return parent::getDefaultTree();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultTree(\Akeneo\Tool\Component\Classification\Model\CategoryInterface $defaultTree)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultTree', [$defaultTree]);

        return parent::setDefaultTree($defaultTree);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmailNotifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmailNotifications', []);

        return parent::isEmailNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmailNotifications($emailNotifications)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmailNotifications', [$emailNotifications]);

        return parent::setEmailNotifications($emailNotifications);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductGridFilters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductGridFilters', []);

        return parent::getProductGridFilters();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductGridFilters(array $productGridFilters = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductGridFilters', [$productGridFilters]);

        return parent::setProductGridFilters($productGridFilters);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultGridView($alias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultGridView', [$alias]);

        return parent::getDefaultGridView($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultGridViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultGridViews', []);

        return parent::getDefaultGridViews();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultGridView($alias, $defaultGridView)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultGridView', [$alias, $defaultGridView]);

        return parent::setDefaultGridView($alias, $defaultGridView);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone(?string $phone): \Akeneo\UserManagement\Component\Model\UserInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimezone(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimezone', []);

        return parent::getTimezone();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimezone(string $timezone): \Akeneo\UserManagement\Component\Model\UserInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimezone', [$timezone]);

        return parent::setTimezone($timezone);
    }

    /**
     * {@inheritDoc}
     */
    public function addProperty(string $propertyName, $propertyValue): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProperty', [$propertyName, $propertyValue]);

        parent::addProperty($propertyName, $propertyValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty(string $propertyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', [$propertyName]);

        return parent::getProperty($propertyName);
    }

}
